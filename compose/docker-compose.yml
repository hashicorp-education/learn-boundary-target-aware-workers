# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

version: "3.8"

networks:
  default:
  worker1:
  worker2:

services:
  db:
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=boundary
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 10s
      retries: 10

  db-init:
    image: hashicorp/boundary:0.7.5
    command: ["database", "init", "-config", "/boundary/controller.hcl"]
    volumes:
      - "${PWD}/:/boundary/"
    environment:
      - BOUNDARY_PG_URL=postgresql://postgres:postgres@db/boundary?sslmode=disable
    depends_on:
      db:
        condition: service_healthy

  controller:
    image: hashicorp/boundary:0.7.5
    # I had to `docker restart boundary_controller_1` a couple times when
    # running on an Ubuntu host.
    entrypoint: sh -c "sleep 3 && exec boundary server -config /boundary/controller.hcl -log-level debug"
    volumes:
      - "${PWD}/:/boundary/"
    hostname: boundary
    ports:
      - "9200:9200"
      - "9201:9201"
    environment:
      - BOUNDARY_PG_URL=postgresql://postgres:postgres@db/boundary?sslmode=disable
    depends_on:
      - db-init
    networks:
      - default
      - worker1
      - worker2

  worker1:
    image: hashicorp/boundary:0.7.5
    command: ["server", "-config", "/boundary/worker1.hcl", "-log-level", "debug"]
    volumes:
      - "${PWD}/:/boundary/"
    hostname: worker1
    ports:
      - "9202:9202"
    environment:
      - HOSTNAME=worker1
    depends_on:
      - controller
    networks:
      - default
      - worker1

  worker2:
    image: hashicorp/boundary:0.7.5
    command: ["server", "-config", "/boundary/worker2.hcl", "-log-level", "debug"]
    volumes:
      - "${PWD}/:/boundary/"
    hostname: worker2
    ports:
      - "9203:9202"
    environment:
      - HOSTNAME=worker2
    depends_on:
      - controller
    networks:
      - default
      - worker2

# Private Database Targets - not exposed to host network, only available via Boundary

  postgres:
    image: postgres
    environment:
      - POSTGRES_DB=test1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 10s
      retries: 5
    networks:
      - worker1

  redis:
    image: redis
    networks:
      - worker2

  mysql:
    image: mariadb
    environment:
      - 'MYSQL_ROOT_PASSWORD=my-secret-pw'
    networks:
      - worker1
